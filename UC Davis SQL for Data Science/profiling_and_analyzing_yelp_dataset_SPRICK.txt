Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin =  493
vii. Photo = 10000
viii. Tip =  537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT *
	FROM user
	WHERE id = NULL 
		OR name = NULL
		OR review_count = NULL
		OR yelping_since = NULL
		OR useful = NULL
		OR funny = NULL
		OR cool = NULL
		OR fans = NULL
		OR average_stars = NULL
		OR compliment_hot = NULL
		OR compliment_more = NULL
		OR compliment_profile = NULL
		OR compliment_cute = NULL
		OR compliment_list = NULL
		OR compliment_note = NULL
		OR compliment_plain = NULL
		OR compliment_cool = NULL
		OR compliment_funny = NULL
		OR compliment_writer = NULL
		OR compliment_photos = NULL
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city
		, SUM(review_count) AS total_reviews
	FROM business
	GROUP BY city
	ORDER BY total_reviews DESC

	Copy and Paste the Result Below:
	
	+-----------------+---------------+
	| city            | total_reviews |
	+-----------------+---------------+
	| Las Vegas       |         82854 |
	| Phoenix         |         34503 |
	| Toronto         |         24113 |
	| Scottsdale      |         20614 |
	| Charlotte       |         12523 |
	| Henderson       |         10871 |
	| Tempe           |         10504 |
	| Pittsburgh      |          9798 |
	| Montréal        |          9448 |
	| Chandler        |          8112 |
	| Mesa            |          6875 |
	| Gilbert         |          6380 |
	| Cleveland       |          5593 |
	| Madison         |          5265 |
	| Glendale        |          4406 |
	| Mississauga     |          3814 |
	| Edinburgh       |          2792 |
	| Peoria          |          2624 |
	| North Las Vegas |          2438 |
	| Markham         |          2352 |
	| Champaign       |          2029 |
	| Stuttgart       |          1849 |
	| Surprise        |          1520 |
	| Lakewood        |          1465 |
	| Goodyear        |          1155 |
	+-----------------+---------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

	SQL code used to arrive at answer:
	
	SELECT stars
		, SUM(review_count) AS total_reviews
	FROM business
	WHERE city == "Avon"
	GROUP BY stars

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------+---------------+
	| stars | total_reviews |
	+-------+---------------+
	|   1.5 |            10 |
	|   2.5 |             6 |
	|   3.5 |            88 |
	|   4.0 |            21 |
	|   4.5 |            31 |
	|   5.0 |             3 |
	+-------+---------------+

ii. Beachwood

	SQL code used to arrive at answer:

	SELECT stars
		, SUM(review_count) AS total_reviews
	FROM business
	WHERE city == "Beachwood"
	GROUP BY stars

	Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
			
	+-------+---------------+
	| stars | total_reviews |
	+-------+---------------+
	|   2.0 |             8 |
	|   2.5 |             3 |
	|   3.0 |            11 |
	|   3.5 |             6 |
	|   4.0 |            69 |
	|   4.5 |            17 |
	|   5.0 |            23 |
	+-------+---------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name AS user_name
		, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3
	
	Copy and Paste the Result Below:
	
	+-----------+--------------+
	| user_name | review_count |
	+-----------+--------------+
	| Gerald    |         2000 |
	| Sara      |         1629 |
	| Yuri      |         1339 |
	+-----------+--------------+
		

8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	It does appear that there is a correlation between posting more reviews and having more fans. As seen in the query outputs below, of the top 5 user by review count and top 5 users by fans, the only "duplicate" user is Gerald (1/5 users).
	
	-- Top users by review_count:
	
	SELECT name AS user_name
		, review_count
		, fans
	FROM user
	ORDER BY review_count DESC
	LIMIT 5
	
	+-----------+--------------+------+
	| user_name | review_count | fans |
	+-----------+--------------+------+
	| Gerald    |         2000 |  253 |
	| Sara      |         1629 |   50 |
	| Yuri      |         1339 |   76 |
	| .Hon      |         1246 |  101 |
	| William   |         1215 |  126 |
	+-----------+--------------+------+
	
	-- Top users by fans:
	
	SELECT name AS user_name
		, review_count
		, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 5
	
	+-----------+--------------+------+
	| user_name | review_count | fans |
	+-----------+--------------+------+
	| Amy       |          609 |  503 |
	| Mimi      |          968 |  497 |
	| Harald    |         1153 |  311 |
	| Gerald    |         2000 |  253 |
	| Christine |          930 |  173 |
	+-----------+--------------+------+
	
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	Yes, there are more reviews that contain the word "love" than with the word "hate"
	
	SQL code used to arrive at answer:
	
	-- Count of reviews containing "love"
	SELECT COUNT(*)
	FROM review
	WHERE text like '%love%'
	
	+----------+
	| COUNT(*) |
	+----------+
	|     1780 |
	+----------+

	-- Count of reviews containing "hate"

	SELECT COUNT(*)
	FROM review
	WHERE text like '%hate%'
	
	+----------+
	| COUNT(*) |
	+----------+
	|      232 |
	+----------+

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name
		, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	City: Charlotte
	Category: Shopping
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the business that fell into the '4-5 stars' category is open in the later part of the day (noon to 10 PM) while the businesses that fell into the '2-3 stars' category are open during the more typical business hours (9/10 AM to mid-afternoon). 

ii. Do the two groups you chose to analyze have a different number of reviews?

There is not a large range in number of reviews, nor a distinction between the '2-3 stars' and '4-5 stars' categories. Both are within the 6-8 review count. 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No, there does not appear to be any correlation from the neighborhood between the two groups. 

	SQL code used for analysis:

	SELECT b.name
		, b.city
		, c.category
		, h.hours
		, b.review_count
		, b.neighborhood
		, b.stars
		, CASE WHEN b.stars BETWEEN 2.0 AND 3.9 THEN '2-3 stars'
			WHEN b.stars BETWEEN 4.0 AND 5.0 THEN '4-5 stars'
			END AS stars_cat
	FROM business b
	INNER JOIN category c
		ON c.business_id = b.id
	INNER JOIN hours h
		ON h.business_id = b.id
		AND h.hours like 'Sat%'
	WHERE b.city = 'Charlotte' 
		AND c.category = 'Shopping'
	ORDER BY stars_cat DESC

	+-------------------------+-----------+----------+----------------------+--------------+-----------------+-------+-----------+
	| name                    | city      | category | hours                | review_count | neighborhood    | stars | stars_cat |
	+-------------------------+-----------+----------+----------------------+--------------+-----------------+-------+-----------+
	| HighLife North Tryon    | Charlotte | Shopping | Saturday|12:00-22:00 |            5 | University City |   4.0 | 4-5 stars |
	| Freeman's Car Stereo    | Charlotte | Shopping | Saturday|9:00-17:00  |            8 |                 |   3.5 | 2-3 stars |
	| Dilworth Custom Framing | Charlotte | Shopping | Saturday|10:00-15:00 |            6 | South End       |   3.5 | 2-3 stars |
	+-------------------------+-----------+----------+----------------------+--------------+-----------------+-------+-----------+
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

The businesses listed as open have more reviews that the businesses that are not open.      
         
ii. Difference 2:

Business that are marked as open have more reviews with a "useful" and "cool" rating that those that are not open.         
         
	SQL code used for analysis:

	SELECT CASE WHEN b.is_open = '1' THEN 'open'
				WHEN b.is_open = '0' THEN 'not open'
				END AS 'open_status'
		, AVG(b.stars) AS avg_stars
		, SUM(b.review_count) AS total_reviews
		, SUM(r.useful) AS total_useful
		, SUM(r.cool) AS total_cool
	FROM business b
	INNER JOIN review r
		ON r.business_id = b.id
	GROUP BY open_status

	+-------------+---------------+---------------+--------------+------------+
	| open_status |     avg_stars | total_reviews | total_useful | total_cool |
	+-------------+---------------+---------------+--------------+------------+
	| not open    | 3.54225352113 |          9217 |           69 |         30 |
	| open        |  3.7610619469 |        175821 |          484 |        219 |
	+-------------+---------------+---------------+--------------+------------+

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
I chose to cluster businesses to find commonalities or anomalies between them.
        
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
I grouped the businesses by category and am only interested in categories where there are more than or equal to 10 businesses. For these categories, I am interested in the average stars and total reviews for each. I hope to gain further insight on if certain categories are more popular than others on Yelp.
                  
iii. Output of your finished dataset:

	+------------------------+------------------+---------------+---------------+
	| category               | total_businesses |     avg_stars | total_reviews |
	+------------------------+------------------+---------------+---------------+
	| Restaurants            |               71 | 3.45774647887 |          4504 |
	| Shopping               |               30 | 3.98333333333 |           977 |
	| Food                   |               23 | 3.78260869565 |          1781 |
	| Nightlife              |               20 |         3.475 |          1351 |
	| Health & Medical       |               17 | 4.08823529412 |           203 |
	| Bars                   |               17 |           3.5 |          1322 |
	| Home Services          |               16 |           4.0 |            94 |
	| Beauty & Spas          |               13 | 3.88461538462 |           119 |
	| Local Services         |               12 | 4.20833333333 |           100 |
	| American (Traditional) |               11 | 3.81818181818 |          1128 |
	| Active Life            |               10 |          4.15 |           131 |
	+------------------------+------------------+---------------+---------------+      
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT c.category
		, COUNT(b.name) AS total_businesses
		, AVG(b.stars) AS avg_stars
		, SUM(b.review_count) AS total_reviews
	FROM business b 
	INNER JOIN category c 
		ON c.business_id = b.id
	GROUP BY c.category
	HAVING total_businesses >= 10
	ORDER BY total_businesses DESC
		, AVG(stars) DESC